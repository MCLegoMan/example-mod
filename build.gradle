plugins {
	id 'fabric-loom' version "1.2-SNAPSHOT"
	id 'legacy-looming' version "1.2-SNAPSHOT"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

loom {
	if ("${project.accesswidener}" == "true") accessWidenerPath = file("${project.accesswidener_path}")
	// customMinecraftManifest.set("https://meta.legacyfabric.net/v2/manifest/${minecraft_version}")
	
	// Required by 1.7.x
	// runs {
	// 	client {
	// 		programArgs "--userProperties", "{}"
	// 	}
	// }
}

repositories {
	maven { url 'https://jitpack.io' }
	maven { url 'https://repository.apache.org/snapshots' }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings(legacy.yarn(project.minecraft_version, project.yarn_mappings))
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation ("net.legacyfabric.legacy-fabric-api:legacy-fabric-api:${project.fabric_version}")
	implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
	implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 8
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
	}
}